df$Hasil <- apply(df[, 4:6], 1, f)
df <- df[, c(ncol(df)-1, ncol(df))]
df$Estimability <- ifelse(df$`t'` == df$Hasil, "Estimable", "Tidak estimable")
return(df)
}
# Contoh penggunaan fungsi
pm <- c(-1, 0, 1)
result_df <- generate_combinations(tXX.c2, tXX, pm)
df <- expand.grid(t1 = pm, t2 = pm, t3 = pm)
df$b <- as.matrix(df) %*% tXX.c2 %*% tXX
df <- df[rowSums(df != 0) > 0, ]
df <- df[rowSums(df[, 1:ncol(df)] != 0) > 0, ]
str(df)
df[rowSums(df[, 1:3] != 0) > 0, ]
df <- df[rowSums(df[, 1:3] != 0) > 0, ]
rownames(df) <- NULL
f <- function(x) paste0("(", paste0(x, collapse = ", "), ")")
df$`t'` <- apply(df[, 1:3], 1, f)
df$Hasil <- apply(df[, 4:6], 1, f)
df[, 4:6]
df[, df$b]
df$b
df$Hasil <- apply(df$b, 1, f)
df <- df[, c(ncol(df)-1, ncol(df))]
df$Estimability <- ifelse(df$`t'` == df$Hasil, "Estimable", "Tidak estimable")
install_load("DT","dplyr")
generate_combinations <- function(tXX.c2, tXX, pm) {
df <- expand.grid(t1 = pm, t2 = pm, t3 = pm)
df <- df %>%
mutate(b = rowSums(outer(t1, t2) %*% tXX.c2 %*% tXX * t3),
`t'` = paste0("(", t1, ", ", t2, ", ", t3, ")"),
Hasil = paste0("(", b, ")"),
Estimability = if_else(`t'` == Hasil, "Estimable", "Tidak estimable")) %>%
filter(rowSums(select(., starts_with("t")) != 0) > 0) %>%
select(`t'` = Hasil, Hasil, Estimability)
return(df)
}
# Contoh penggunaan fungsi
pm <- c(-1, 0, 1)
result_df <- generate_combinations(tXX.c2, tXX, pm)
install_load("DT","dplyr")
generate_combinations <- function(tXX.c2, tXX, pm) {
df <- expand.grid(t1 = pm, t2 = pm, t3 = pm)
df <- df %>%
mutate(b = as.matrix(df) %*% tXX.c2 %*% tXX,
`t'` = paste0("(", t1, ", ", t2, ", ", t3, ")"),
Hasil = paste0("(", b, ")"),
Estimability = if_else(`t'` == Hasil, "Estimable", "Tidak estimable")) %>%
filter(rowSums(select(., starts_with("t")) != 0) > 0) %>%
select(`t'` = Hasil, Hasil, Estimability)
return(df)
}
# Contoh penggunaan fungsi
pm <- c(-1, 0, 1)
result_df <- generate_combinations(tXX.c2, tXX, pm)
install_load("DT","dplyr")
generate_combinations <- function(tXX.c2, tXX, pm) {
df <- expand.grid(t1 = pm, t2 = pm, t3 = pm)
df <- df %>%
mutate(b = as.matrix(df) %*% tXX.c2 %*% tXX,
`t'` = paste0("(", t1, ", ", t2, ", ", t3, ")", collapse = ", "),
Hasil = paste0("(", b, ")", collapse = ", "),
Estimability = if_else(`t'` == Hasil, "Estimable", "Tidak estimable")) %>%
filter(rowSums(select(., starts_with("t")) != 0) > 0) %>%
select(`t'` = Hasil, Hasil, Estimability)
return(df)
}
# Contoh penggunaan fungsi
pm <- c(-1, 0, 1)
result_df <- generate_combinations(tXX.c2, tXX, pm)
install_load("DT","dplyr")
generate_combinations <- function(tXX.c2, tXX, pm) {
df <- expand.grid(t1 = pm, t2 = pm, t3 = pm)
df <- df %>%
mutate(b = as.matrix(df) %*% tXX.c2 %*% tXX,
`t'` = paste0("(", t1, ", ", t2, ", ", t3, ")", collapse = ", "),
Hasil = paste0("(", b, ")", collapse = ", "),
Estimability = if_else(`t'` == Hasil, "Estimable", "Tidak estimable")) %>%
filter(rowSums(select(., starts_with("t")) != 0) > 0) %>%
select(`t'` = Hasil, Hasil, Estimability)
return(df)
}
# Contoh penggunaan fungsi
pm <- c(-1, 0, 1)
result_df <- generate_combinations(tXX.c2, tXX, pm)
# Output hasil
datatable(result_df, filter = 'top',
options = list(pageLength = 5))
install_load("DT","dplyr")
generate_combinations <- function(tXX.c2, tXX, pm) {
df <- expand.grid(t1 = pm, t2 = pm, t3 = pm)
f <- function(x) paste0("(", paste0(x, collapse = ", "), ")")
df <- df %>%
mutate(b = as.matrix(df) %*% tXX.c2 %*% tXX,
`t'` = apply(df[, 1:3], 1, f),
Hasil = apply(df$b, 1, f),
Estimability = if_else(`t'` == Hasil, "Estimable", "Tidak estimable")) %>%
filter(rowSums(select(., starts_with("t")) != 0) > 0) %>%
select(`t'` = Hasil, Hasil, Estimability)
return(df)
}
# Contoh penggunaan fungsi
pm <- c(-1, 0, 1)
result_df <- generate_combinations(tXX.c2, tXX, pm)
install_load("DT","dplyr")
generate_combinations <- function(tXX.c2, tXX, pm) {
df <- expand.grid(t1 = pm, t2 = pm, t3 = pm)
f <- function(x) paste0("(", paste0(x, collapse = ", "), ")")
df <- df %>%
mutate(b = as.matrix(df) %*% tXX.c2 %*% tXX,
`t'` = f(c(t1, t2, t3)),
Hasil = f(b),
Estimability = if_else(`t'` == Hasil, "Estimable", "Tidak estimable")) %>%
filter(rowSums(select(., starts_with("t")) != 0) > 0) %>%
select(`t'` = Hasil, Hasil, Estimability)
return(df)
}
# Contoh penggunaan fungsi
pm <- c(-1, 0, 1)
result_df <- generate_combinations(tXX.c2, tXX, pm)
# Output hasil
datatable(result_df, filter = 'top',
options = list(pageLength = 5))
generate_combinations <- function(tXX.c2, tXX, pm) {
df <- expand.grid(t1 = pm, t2 = pm, t3 = pm)
df$b <- as.matrix(df) %*% tXX.c2 %*% tXX
df <- df[rowSums(df[, 1:3] != 0) > 0, ]
rownames(df) <- NULL
f <- function(x) paste0("(", paste0(x, collapse = ", "), ")")
df$`t'` <- apply(df[, 1:3], 1, f)
df$Hasil <- apply(df$b, 1, f)
df <- df[, c(ncol(df)-1, ncol(df))]
df$Estimability <- ifelse(df$`t'` == df$Hasil, "Estimable", "Tidak estimable")
return(df)
}
# Contoh penggunaan fungsi
pm <- c(-1, 0, 1)
result_df <- generate_combinations(tXX.c2, tXX, pm)
# Output hasil
datatable(result_df, filter = 'top',
options = list(pageLength = 5))
generate_combinations <- function(tXX.c2, tXX, pm) {
df <- expand.grid(t1 = pm, t2 = pm, t3 = pm)
df$b <- as.matrix(df) %*% tXX.c2 %*% tXX
df <- df[rowSums(df[, 1:3] != 0) > 0, ]
rownames(df) <- NULL
f <- function(x) paste0("(", paste0(x, collapse = ", "), ")")
df$`t'` <- apply(df[, 1:3], 1, f)
df$Hasil <- apply(df$b, 1, f)
df <- df[, c(ncol(df)-1, ncol(df))]
df$Estimability <- ifelse(df$`t'` == df$Hasil, "Estimable", "Tidak estimable")
return(df)
}
# Contoh penggunaan fungsi
pm <- c(-1, 0, 1)
result_df <- generate_combinations(tXX.c2, tXX, pm)
# Output hasil
install_load('DT')
datatable(result_df, filter = 'top',
options = list(pageLength = 5))
comb.estimable <- function(tXX.c2, tXX, pm) {
df <- expand.grid(t1 = pm, t2 = pm, t3 = pm)
df$b <- as.matrix(df) %*% tXX.c2 %*% tXX
df <- df[rowSums(df[, 1:3] != 0) > 0, ]
rownames(df) <- NULL
f <- function(x) paste0("(", paste0(x, collapse = ", "), ")")
df$`t'` <- apply(df[, 1:3], 1, f)
df$Hasil <- apply(df$b, 1, f)
df <- df[, c(ncol(df)-1, ncol(df))]
df$Estimability <- ifelse(df$`t'` == df$Hasil, "Estimable", "Tidak estimable")
return(df)
}
pm <- c(-1, 0, 1)
hasil <- comb.estimable(tXX.c2, tXX, pm)
# Output hasil
install_load('DT')
datatable(hasil, filter = 'top',
options = list(pageLength = 5))
which(hasil=="Estimable")
sum(which(hasil=="Estimable"))
sum(length(which(hasil=="Estimable")))
length(which(hasil=="Estimable")))
length(which(hasil=="Estimable")))
length(which(hasil=="Estimable"))
length(which(hasil=="Estimable"))
length(which(hasil=="Tidak estimable"))
source("~/.active-rstudio-document", echo=TRUE)
View(hasil)
df <- expand.grid(t1 = pm, t2 = pm, t3 = pm)
c(-1,0,-1) %*% tXX.c2 %*% tXX
c(-1,-1,0) %*% tXX.c2 %*% tXX
c(1,1,0) %*% tXX.c2 %*% tXX
c(0,-1,1) %*% tXX.c2 %*% tXX
c(1,0,1) %*% tXX.c2 %*% tXX
c(-1,1,1) %*% tXX.c2 %*% tXX
c(0,1,1) %*% tXX.c1 %*% tXX
c(0,1,1) %*% tXX.c1 %*% tXX
c(-1,1,1) %*% tXX.c2 %*% tXX
c(-1,1,1) %*% tXX.c2 %*% tXX
c(-1,1,1) %*% tXX.c2 %*% tXX
c(-1,1,1) %*% tXX.c1 %*% tXX
c(-1,1,1) %*% tXX.c1 %*% tXX
c(-1,1,1) %*% tXX.c2 %*% tXX
source("~/.active-rstudio-document", echo=TRUE)
c(1,0,1) %*% tXX.c1 %*% tXX
c(1,0,1) %*% tXX.c2 %*% tXX
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
c(1,0,1) %*% tXX.c2 %*% tXX
fractions(X %*% tXX.c1)
fractions(X %*% tXX.c1 %*% t(X))
fractions(X %*% tXX.c2)
fractions(X %*% tXX.c2 %*% t(X))
all( (X %*% tXX.c1 %*% t(X)) == (X %*% tXX.c2 %*% t(X)) )
fractions(tXX.c2)
tXy
fractions(tXX.c2 %*% tXy)
fractions(tXX.c2 %*% tXy)
fractions(tXX.c2 %*% tXy)
tXX.tXy <- matrix(c(tXX, tXy), 3, 4, F)
tXX.tXy
qr(tXX)$rank
qr(tXX.tXy)$rank
qr(tXX)$rank == qr(tXX.tXy)$rank
fractions(tXX.c1 %*% tXy)
c(1,0,0) %*% tXX.c1 %*% tXX
c(0,1,0) %*% tXX.c1 %*% tXX
c(0,0,1) %*% tXX.c1 %*% tXX
c(1,0,0) %*% tXX.c2 %*% tXX
c(0,1,0) %*% tXX.c2 %*% tXX
c(0,0,1) %*% tXX.c2 %*% tXX
c(0,1,-1) %*% tXX.c1 %*% tXX
c(0,1,-1) %*% tXX.c2 %*% tXX
fractions(X %*% tXX.c1 %*% t(X)) #X(X'X)c1X'
fractions(X %*% tXX.c2 %*% t(X)) #X(X'X)c2X'
all( (X %*% tXX.c1 %*% t(X)) == (X %*% tXX.c2 %*% t(X)) ) #apakah sama?
fractions(X %*% tXX.c1)
fractions(X %*% tXX.c1 %*% t(X)) #X(X'X)c1X'
fractions(X %*% tXX.c2)
fractions(X %*% tXX.c2 %*% t(X)) #X(X'X)c2X'
all( (X %*% tXX.c1 %*% t(X)) == (X %*% tXX.c2 %*% t(X)) ) #apakah sama?
remotes::install_github("davidgohel/officedown")
hasil
print(hasil)
block_toc()
block_toc()
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
install_load('officedown','officer','tidyverse','timetk')
install.packages(package)
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
install_load('officedown','officer','tidyverse','timetk')
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
install_load('officedown','officer','tidyverse')
block_toc()
comb.estimable <- function(tXX.c2, tXX, pm) {
df <- expand.grid(t1 = pm, t2 = pm, t3 = pm)
df$b <- as.matrix(df) %*% tXX.c2 %*% tXX
df <- df[rowSums(df[, 1:3] != 0) > 0, ]
rownames(df) <- NULL
f <- function(x) paste0("(", paste0(x, collapse = ", "), ")")
df$`t'` <- apply(df[, 1:3], 1, f)
df$Hasil <- apply(df$b, 1, f)
df <- df[, c(ncol(df)-1, ncol(df))]
df$Estimability <- ifelse(df$`t'` == df$Hasil, "Estimable", "Tidak estimable")
return(df)
}
pm <- c(-1, 0, 1)
hasil <- comb.estimable(tXX.c2, #Matriks kebalikan umum
tXX, #Matriks X'X
pm) #Rentang Kombinasi
# Output hasil
print(hasil)
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
knitr::opts_chuck$set(
echo=FALSE,
#Table Captioning
tab.cap.style="Table Caption",
tab.cap.pre="Table ",
tab.cap.sep=": ",
#Figure Captioning
fig.cap.style="Image Caption",
fig.cap.pre="Figure ",
fig.cap.sep=": "
)
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
knitr::opts_chunk$set(
echo=FALSE,
#Table Captioning
tab.cap.style="Table Caption",
tab.cap.pre="Table ",
tab.cap.sep=": ",
#Figure Captioning
fig.cap.style="Image Caption",
fig.cap.pre="Figure ",
fig.cap.sep=": "
)
install_load('officedown','officer','tidyverse')
comb.estimable <- function(tXX.c2, tXX, pm) {
df <- expand.grid(t1 = pm, t2 = pm, t3 = pm)
df$b <- as.matrix(df) %*% tXX.c2 %*% tXX
df <- df[rowSums(df[, 1:3] != 0) > 0, ]
rownames(df) <- NULL
f <- function(x) paste0("(", paste0(x, collapse = ", "), ")")
df$`t'` <- apply(df[, 1:3], 1, f)
df$Hasil <- apply(df$b, 1, f)
df <- df[, c(ncol(df)-1, ncol(df))]
df$Estimability <- ifelse(df$`t'` == df$Hasil, "Estimable", "Tidak estimable")
return(df)
}
pm <- c(-1, 0, 1)
hasil <- comb.estimable(tXX.c2, #Matriks kebalikan umum
tXX, #Matriks X'X
pm) #Rentang Kombinasi
# Output hasil
print(hasil)
tXy <- c(5, 3, 2) #X'y
tXy
X <- matrix(c(1, 1, 0,
1, 1, 0,
1, 0, 1,
1, 0, 1), 4, 3, T) #X
X
t(X) #X'
t(X) %*% X #X'X
det(t(X) %*% X) #|X'X|
tXy <- c(5, 3, 2) #X'y
tXy
X <- matrix(c(1, 1, 0,
1, 1, 0,
1, 0, 1,
1, 0, 1), 4, 3, T) #X
X
t(X) #X'
t(X) %*% X #X'X
det(t(X) %*% X) #|X'X|
c(1,0,0) %*% tXX.c1 %*% tXX
c(0,1,0) %*% tXX.c1 %*% tXX
c(0,0,1) %*% tXX.c1 %*% tXX
c(1,0,0) %*% tXX.c2 %*% tXX
c(0,1,0) %*% tXX.c2 %*% tXX
c(0,0,1) %*% tXX.c2 %*% tXX
print(hasil)
head(hasil)
head(hasil,n=26)
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
knitr::opts_chunk$set(
echo=FALSE,
#Table Captioning
tab.cap.style="Table Caption",
tab.cap.pre="Tabel ",
tab.cap.sep=": ",
#Figure Captioning
fig.cap.style="Image Caption",
fig.cap.pre="Figure ",
fig.cap.sep=": "
)
install_load('officedown','officer','tidyverse')
block_toc()
block_toc()
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
knitr::opts_chunk$set(
echo=FALSE,
#Table Captioning
tab.cap.style="Table Caption",
tab.cap.pre="Tabel ",
tab.cap.sep=": ",
#Figure Captioning
fig.cap.style="Image Caption",
fig.cap.pre="Figure ",
fig.cap.sep=": "
)
rdocx_document(
base_format = "rmarkdown::word_document"
)
install_load('officedown','officer','tidyverse')
#                      -=( Install & Load Package Function )=-
install_load <- function (package1, ...)  {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages){
# if package is installed locally, load
if(package %in% rownames(installed.packages()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
install.packages(package)
do.call("library", list(package))
}
}
}
install_load('officedown','officer','tidyverse')
knitr::opts_chunk$set(
echo=FALSE,
#Table Captioning
tab.cap.style="Table Caption",
tab.cap.pre="Tabel ",
tab.cap.sep=": ",
#Figure Captioning
fig.cap.style="Image Caption",
fig.cap.pre="Figure ",
fig.cap.sep=": "
)
rdocx_document(
base_format = "rmarkdown::word_document",
reference_num = FALSE
)
